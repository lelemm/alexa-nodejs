name: Dependency Update

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Enable Corepack
        run: corepack enable
          
      - name: Install dependencies
        run: yarn install --immutable
        
      - name: Check for outdated dependencies
        run: |
          echo "Checking for outdated dependencies..."
          yarn outdated --json > outdated.json || true
          
          if [ -s outdated.json ]; then
            echo "üì¶ Found outdated dependencies:"
            cat outdated.json | jq '.data.body[] | "\(.name): \(.current) ‚Üí \(.wanted)"' || true
          else
            echo "‚úÖ All dependencies are up to date"
          fi
          
      - name: Update non-breaking dependencies
        run: |
          echo "Updating non-breaking dependencies..."
          
          # Update patch and minor versions only
          yarn upgrade --pattern "*" --scope patch
          yarn upgrade --pattern "*" --scope minor
          
      - name: Run tests after update
        run: |
          echo "Running tests after dependency update..."
          yarn build
          yarn test || echo "Tests completed with warnings"
          
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: 'üîÑ Automated Dependency Update'
          body: |
            ## üîÑ Automated Dependency Update
            
            This PR contains automated dependency updates for the alexa-nodejs workspace.
            
            ### Changes
            - Updated patch and minor versions of dependencies
            - All packages rebuilt and tested
            
            ### Verification
            - ‚úÖ All packages build successfully
            - ‚úÖ Tests pass (or complete with warnings)
            
            ### Review Required
            Please review the changes and ensure:
            - No breaking changes in updated dependencies
            - All functionality works as expected
            - Security vulnerabilities (if any) are addressed
            
            **Note**: This PR was created automatically. Major version updates require manual review.
          branch: dependency-updates
          delete-branch: true
          labels: |
            dependencies
            automated
            
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Enable Corepack
        run: corepack enable
          
      - name: Install dependencies
        run: yarn install --immutable
        
      - name: Run security audit
        run: |
          echo "Running security audit..."
          
          # Run yarn audit
          audit_output=$(yarn audit --json 2>/dev/null || true)
          
          if echo "$audit_output" | grep -q '"type":"auditSummary"'; then
            echo "üìä Security audit summary:"
            echo "$audit_output" | grep '"type":"auditSummary"' | jq '.data.vulnerabilities'
            
            # Check for critical/high vulnerabilities
            critical=$(echo "$audit_output" | grep '"type":"auditSummary"' | jq '.data.vulnerabilities.critical // 0')
            high=$(echo "$audit_output" | grep '"type":"auditSummary"' | jq '.data.vulnerabilities.high // 0')
            
            if [ "$critical" -gt 0 ] || [ "$high" -gt 0 ]; then
              echo "‚ö†Ô∏è  Found critical or high severity vulnerabilities!"
              echo "Critical: $critical, High: $high"
              
              # Create issue for security vulnerabilities
              echo "Creating issue for security vulnerabilities..."
            else
              echo "‚úÖ No critical or high severity vulnerabilities found"
            fi
          else
            echo "‚úÖ No vulnerabilities found"
          fi
          
      - name: Create security issue if needed
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            await github.rest.issues.create({
              owner,
              repo,
              title: 'üîí Security Vulnerabilities Found',
              body: `## üîí Security Vulnerabilities Detected
              
              The automated security audit has found vulnerabilities in the project dependencies.
              
              ### Action Required
              - Review the security audit output
              - Update vulnerable dependencies
              - Test the application after updates
              
              ### Commands to Run
              \`\`\`bash
              yarn audit
              yarn audit fix
              \`\`\`
              
              **Created automatically by the dependency update workflow.**`,
              labels: ['security', 'high-priority', 'dependencies']
            });

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Enable Corepack
        run: corepack enable
          
      - name: Install dependencies
        run: yarn install --immutable
        
      - name: Check licenses
        run: |
          echo "Checking license compliance..."
          
          # Install license-checker if not available
          if ! command -v license-checker &> /dev/null; then
            npm install -g license-checker
          fi
          
          # Generate license report
          license-checker --json > licenses.json
          
          # Check for problematic licenses
          problematic_licenses=$(cat licenses.json | jq -r 'to_entries[] | select(.value.licenses | test("GPL|AGPL|LGPL|SSPL|BUSL"; "i")) | .key')
          
          if [ -n "$problematic_licenses" ]; then
            echo "‚ö†Ô∏è  Found potentially problematic licenses:"
            echo "$problematic_licenses"
            
            # Create issue for license compliance
            echo "::warning title=License Compliance::Found potentially problematic licenses"
          else
            echo "‚úÖ All licenses appear to be compatible"
          fi
          
      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json
          retention-days: 30 